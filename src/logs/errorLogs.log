{
  message: 'Accessing Not Found Route , /login',
  level: 'error',
  timestamp: '2024-07-24T13:59:19.070Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-24T13:59:51.142Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-07-25T16:27:01.887Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-07-25T16:27:05.256Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:01:52.836Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:02:14.669Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:06:19.708Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:15:30.776Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:16:09.575Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:16:20.594Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:16:45.631Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:19:12.904Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-26T00:50:23.400Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-26T01:32:16.531Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-26T01:34:27.595Z'
}
{
  email: 'mustafa.ramadan165@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-26T14:50:25.979Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-26T17:17:01.008Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-27T00:20:23.688Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-27T13:37:24.672Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No SubCategory with this ID',
  timestamp: '2024-08-01T17:37:38.282Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No SubCategory with this ID',
  timestamp: '2024-08-01T17:38:02.466Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-01T17:45:29.704Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-01T17:45:29.707Z'
}
{
  stack: 'Error: Duplicate Key , slug ,test_2\n' +
    '    at duplicateKeyHandler (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\layer.js:71:5)\n' +
    '    at trim_prefix (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:326:13)\n' +
    '    at H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:646:15\n' +
    '    at next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:265:14)\n' +
    '    at next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , slug ,test_2',
  timestamp: '2024-08-01T17:48:54.933Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-02T15:19:37.254Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-02T15:19:37.258Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T15:20:20.921Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T15:20:20.923Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T15:20:20.926Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T15:20:20.928Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-02T15:57:54.353Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-02T16:00:00.704Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-02T16:00:00.706Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T16:49:08.771Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T16:49:08.773Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T17:51:20.714Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T17:51:20.717Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T18:42:41.639Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T18:42:41.642Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T18:43:47.296Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T18:43:47.298Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-02T22:36:58.539Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-02T22:36:58.542Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-02T22:38:08.482Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-02T22:38:08.484Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-03T12:57:17.725Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-03T12:57:17.729Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:22:04.109Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:22:04.112Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:31:07.809Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:31:07.812Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-03T13:32:03.453Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-03T13:32:03.455Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:33:09.533Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:33:09.536Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:34:36.012Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:34:36.014Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-03T13:36:15.436Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-03T13:36:15.438Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:37:39.787Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:37:39.790Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\layer.js:71:5)\n' +
    '    at trim_prefix (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:326:13)\n' +
    '    at H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at Immediate.next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at Immediate._onImmediate (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:646:15)\n' +
    '    at process.processImmediate (node:internal/timers:480:21)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-03T17:35:03.036Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name must be a string"}',
  timestamp: '2024-08-04T17:48:40.175Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name must be a string"}',
  timestamp: '2024-08-04T20:47:51.513Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name must be a string"}',
  timestamp: '2024-08-05T00:15:46.218Z'
}
{
  error: {
    message: '/tmp/c9d71394-3bc3-4ee7-b1b4-dbfc43333ff6.jpg: unable to open for write\n' +
      'windows error: The system cannot find the file specified.',
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T01:34:53.368Z'
}
{
  error: {
    message: '/tmp/82ec9a64-f5f3-44bf-87c5-5f8fcc050093.jpg: unable to open for write\n' +
      'windows error: The system cannot find the file specified.',
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T02:55:57.073Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description must be a string"}',
  timestamp: '2024-08-05T10:24:19.393Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'slug() requires a string argument, received object'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T10:26:33.937Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'slug() requires a string argument, received object'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T10:26:56.288Z'
}
{
  message: 'Accessing Not Found Route , /api/v1/product',
  level: 'error',
  timestamp: '2024-08-05T20:11:00.922Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-05T20:11:01.189Z'
}
{
  message: 'Accessing Not Found Route , /api/v1/product',
  level: 'error',
  timestamp: '2024-08-05T20:11:02.734Z'
}
{
  message: 'Accessing Not Found Route , /api/v1/product',
  level: 'error',
  timestamp: '2024-08-05T20:11:02.738Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-08-07T10:04:17.449Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-07T11:14:02.281Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-07T16:21:08.644Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-07T16:24:19.734Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name not allowed to be empty"}',
  timestamp: '2024-08-08T23:14:12.187Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description not allowed to be empty"}',
  timestamp: '2024-08-08T23:35:11.466Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description not allowed to be empty"}',
  timestamp: '2024-08-08T23:35:14.596Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description not allowed to be empty"}',
  timestamp: '2024-08-08T23:35:45.245Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name not allowed to be empty"}',
  timestamp: '2024-08-08T23:59:54.804Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Invalid regular expression: /(?=.*[)/: Unterminated character class'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T01:29:06.056Z'
}
{
  stack: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n  '6', 'b', '5', 'e',\\n  '7', 'a', 'd', '0',\\n  '3', '1', '4', '2'\\n]" (type string) at path "subCategory.0" because of "CastError",\n` +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n  '6', 'b', '5', 'e',\\n  '7', 'a', 'd', '0',\\n  '3', '1', '4', '2'\\n]" (type string) at path "subCategory.0" because of "CastError",`,
  timestamp: '2024-08-09T12:09:45.229Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,66b56e7b5a66de60331d426e\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,66b56e7b5a66de60331d426e',
  timestamp: '2024-08-09T12:37:56.595Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'query is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T13:38:01.379Z'
}
{
  message: 'Invalid User Id for creating cartItems',
  level: 'error',
  timestamp: '2024-08-09T14:41:55.537Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:45:40.682Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:45:44.116Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:45:47.821Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:49:36.037Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-09T14:49:36.040Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T15:31:01.583Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T15:34:18.173Z'
}
{
  stack: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",\n` +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",`,
  timestamp: '2024-08-09T15:55:19.618Z'
}
{
  stack: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",\n` +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",`,
  timestamp: '2024-08-09T16:00:24.271Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:01:39.505Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:44:29.933Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:46:00.036Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:46:08.194Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:46:45.694Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T16:49:32.587Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T16:53:00.190Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T17:11:02.543Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T17:14:05.247Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T17:15:48.213Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:19:15.749Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:22:04.095Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:23:11.847Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:24:01.219Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:27:28.324Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:29:07.615Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T18:41:46.128Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 13033,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
              },
              list: [
                'api.cloudinary.com:443:::::::::::::::::::::',
                'accept.paymob.com:443:::::::::::::::::::::'
              ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 13033,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
          },
          list: [
            'api.cloudinary.com:443:::::::::::::::::::::',
            'accept.paymob.com:443:::::::::::::::::::::'
          ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13033,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 18:44:28 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13033,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 18:44:28 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 13033,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 18:44:28 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13033,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 13033,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
            },
            list: [
              'api.cloudinary.com:443:::::::::::::::::::::',
              'accept.paymob.com:443:::::::::::::::::::::'
            ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13033,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 18:44:28 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13033,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 18:44:28 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 13033,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T18:44:28.345Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 13279,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
              },
              list: [
                'api.cloudinary.com:443:::::::::::::::::::::',
                'accept.paymob.com:443:::::::::::::::::::::'
              ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 13279,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
          },
          list: [
            'api.cloudinary.com:443:::::::::::::::::::::',
            'accept.paymob.com:443:::::::::::::::::::::'
          ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13279,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 18:44:38 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13279,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 18:44:38 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 13279,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 18:44:38 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13279,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 13279,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
            },
            list: [
              'api.cloudinary.com:443:::::::::::::::::::::',
              'accept.paymob.com:443:::::::::::::::::::::'
            ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13279,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 18:44:38 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13279,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 18:44:38 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 13279,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T18:44:38.529Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 13574,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
              },
              list: [
                'api.cloudinary.com:443:::::::::::::::::::::',
                'accept.paymob.com:443:::::::::::::::::::::'
              ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 13574,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
          },
          list: [
            'api.cloudinary.com:443:::::::::::::::::::::',
            'accept.paymob.com:443:::::::::::::::::::::'
          ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13574,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 18:45:05 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13574,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 18:45:05 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 13574,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 18:45:05 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13574,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 13574,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
            },
            list: [
              'api.cloudinary.com:443:::::::::::::::::::::',
              'accept.paymob.com:443:::::::::::::::::::::'
            ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13574,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 18:45:05 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13574,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 18:45:05 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 13574,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T18:45:05.324Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-09T19:20:32.001Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-09T19:20:43.409Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-09T19:24:23.987Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Unexpected number in JSON at position 1'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T19:48:01.335Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 1299,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
              },
              list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 1299,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
          },
          list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 1299,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                },
                list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 20:19:11 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 1299,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                },
                list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 20:19:11 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 1299,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 20:19:11 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 1299,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                },
                list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 1299,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
            },
            list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 1299,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                      },
                      list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 20:19:11 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 1299,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                      },
                      list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 20:19:11 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 1299,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T20:19:11.851Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b62cdf04e5fee1a087e8b5",
  level: 'error',
  timestamp: '2024-08-09T20:43:46.108Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T20:49:22.846Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T20:50:08.379Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-09T20:50:08.383Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Provide Required Fields',
  timestamp: '2024-08-09T20:59:24.486Z'
}
{
  stack: 'Error: size.color : size Color is required,size.label : Size label is required,size.value : Size value is required,name.ar : name is Required,name.en : name is Required,\n' +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: size.color : size Color is required,size.label : Size label is required,size.value : Size value is required,name.ar : name is Required,name.en : name is Required,',
  timestamp: '2024-08-09T21:11:26.080Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Unexpected token u in JSON at position 0'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T21:13:48.265Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T23:14:24.970Z'
}
{
  userId: new ObjectId('66b7960bef26c5dc0da3439a'),
  level: 'error',
  message: "This user didn't activate his account",
  timestamp: '2024-08-10T17:07:23.934Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-10T20:35:16.055Z'
}
{
  message: 'Delete cartItems cuz the needed quantity more than the available ',
  level: 'error',
  timestamp: '2024-08-10T20:51:35.869Z'
}
{
  message: 'Delete cartItems cuz the needed quantity more than the available ',
  level: 'error',
  timestamp: '2024-08-10T23:53:36.461Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Product Found',
  timestamp: '2024-08-11T02:31:19.191Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Product Found',
  timestamp: '2024-08-11T02:31:22.442Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Product Found',
  timestamp: '2024-08-11T02:31:26.112Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T15:47:27.974Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T15:47:27.979Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T15:49:10.428Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T15:49:10.431Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T15:50:11.969Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T15:50:11.971Z'
}
{
  error: {
    name: 'MulterError',
    message: 'Unexpected field',
    code: 'LIMIT_UNEXPECTED_FILE',
    field: 'images',
    storageErrors: [],
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-11T15:59:55.192Z'
}
{
  error: {
    name: 'MulterError',
    message: 'Unexpected field',
    code: 'LIMIT_UNEXPECTED_FILE',
    field: 'images',
    storageErrors: [],
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-11T16:05:11.375Z'
}
{
  error: {
    name: 'MulterError',
    message: 'Unexpected field',
    code: 'LIMIT_UNEXPECTED_FILE',
    field: 'images',
    storageErrors: [],
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-11T16:22:22.115Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T16:31:54.874Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T16:31:54.875Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T16:33:23.739Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T16:33:23.742Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T16:34:57.588Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T16:34:57.590Z'
}
{
  stack: 'Error: Duplicate Key , product ,66b8e75adbdbb2678aa12ced\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:67:12)',
  level: 'error',
  message: 'Error: Duplicate Key , product ,66b8e75adbdbb2678aa12ced',
  timestamp: '2024-08-11T16:44:27.686Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T16:51:46.570Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T16:51:46.572Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b7ca8530c435ec1e83bdda",
  level: 'error',
  timestamp: '2024-08-11T16:51:46.635Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-11T16:51:46.637Z'
}
{
  stack: 'Error: Duplicate Key , product ,66b8edc136ab3b81843756cb\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:67:12)',
  level: 'error',
  message: 'Error: Duplicate Key , product ,66b8edc136ab3b81843756cb',
  timestamp: '2024-08-11T17:05:12.181Z'
}
{
  message: 'Invalid User Id for creating cartItems',
  level: 'error',
  timestamp: '2024-08-11T18:26:26.447Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid User Id',
  timestamp: '2024-08-11T18:26:26.456Z'
}
{
  message: 'Invalid User Id for creating cartItems',
  level: 'error',
  timestamp: '2024-08-11T18:26:26.472Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid User Id',
  timestamp: '2024-08-11T18:26:26.473Z'
}
{
  stack: 'Error: Duplicate Key , name ,[object Object]\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , name ,[object Object]',
  timestamp: '2024-08-11T20:59:00.616Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-08-12T00:55:47.183Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: You are not logging in , Please Login ',
  timestamp: '2024-08-12T00:55:47.190Z'
}
{
  stack: 'Error: category : Cast to ObjectId failed for value "undefined" (type string) at path "category" because of "BSONError",\n' +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: category : Cast to ObjectId failed for value "undefined" (type string) at path "category" because of "BSONError",',
  timestamp: '2024-08-12T00:59:12.427Z'
}
{
  stack: 'Error: category : Cast to ObjectId failed for value "undefined" (type string) at path "category" because of "BSONError",\n' +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: category : Cast to ObjectId failed for value "undefined" (type string) at path "category" because of "BSONError",',
  timestamp: '2024-08-12T01:00:58.207Z'
}
{
  stack: 'Error: category : Cast to ObjectId failed for value "{"en":"Pants","ar":"بانتس"}" (type string) at path "category" because of "BSONError",\n' +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: category : Cast to ObjectId failed for value "{"en":"Pants","ar":"بانتس"}" (type string) at path "category" because of "BSONError",',
  timestamp: '2024-08-12T01:01:48.283Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Invalid regular expression: /(?=.*[)/: Unterminated character class'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T01:06:38.722Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b9028aa1d87f12ec5b72ef",
  level: 'error',
  timestamp: '2024-08-12T01:44:08.223Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-12T01:44:08.228Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b9028aa1d87f12ec5b72ef",
  level: 'error',
  timestamp: '2024-08-12T01:44:08.236Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-12T01:44:08.237Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:28.200Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:32.215Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:32.896Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:33.165Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:34.056Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:34.299Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:34.480Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T01:44:34.681Z'
}
{
  email: 'qwe@g.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T01:45:25.404Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T01:45:25.405Z'
}
{
  email: 'qwe@g.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T01:45:38.816Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T01:45:38.817Z'
}
{
  email: 'qwe@g.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T01:45:42.184Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T01:45:42.185Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:29.213Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:30.382Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:31.388Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:31.626Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:31.786Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:31.936Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:32.105Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:32.266Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:32.453Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:32.602Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:20:32.766Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:21:13.299Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:21:13.906Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:21:14.358Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:21:14.702Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:21:15.101Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:24:39.749Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:24:40.527Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:24:40.685Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:25:24.444Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:25:25.744Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:25:25.918Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"error":"Password must be at least 8 characters"}',
  timestamp: '2024-08-12T02:25:26.099Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Unexpected token o in JSON at position 1'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:05.154Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Unexpected token o in JSON at position 1'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:06.666Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Unexpected token o in JSON at position 1'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:08.194Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'error is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:25.939Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'error is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:26.090Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'error is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:26.735Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'error is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:26.911Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'error is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:27.035Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'error is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:27.184Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'errorFormat is not defined'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:45.891Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'errorFormat is not defined'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:46.670Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'errorFormat is not defined'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:47.139Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'errorFormat is not defined'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:47.402Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'errorFormat is not defined'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:47.750Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'errorFormat is not defined'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:48.001Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'errorFormat is not defined'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T02:27:48.303Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:28:50.524Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T02:29:20.716Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T02:29:20.717Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Category with this ID',
  timestamp: '2024-08-12T02:47:43.279Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:39.343Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:40.270Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:40.462Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:48.140Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:48.966Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:50.655Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:50.928Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:51.081Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-12T02:52:51.269Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T12:31:09.970Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T12:31:09.976Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T13:05:03.124Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T13:05:03.125Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T13:05:05.190Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T13:05:05.191Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T13:05:05.827Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T13:05:05.828Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T13:05:06.319Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T13:05:06.320Z'
}
{
  stack: 'Error:  Invalid ID, undefined is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:67:12)',
  level: 'error',
  message: 'Error:  Invalid ID, undefined is not a valid ID',
  timestamp: '2024-08-12T14:41:04.405Z'
}
{
  stack: 'Error: Duplicate Key , user ,66ba089ff624a28e26d8014e\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:67:12)',
  level: 'error',
  message: 'Error: Duplicate Key , user ,66ba089ff624a28e26d8014e',
  timestamp: '2024-08-12T14:46:36.279Z'
}
{
  stack: 'Error: Duplicate Key , product ,66ba1c4ef624a28e26d803ae\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:67:12)',
  level: 'error',
  message: 'Error: Duplicate Key , product ,66ba1c4ef624a28e26d803ae',
  timestamp: '2024-08-12T14:55:28.599Z'
}
{
  stack: 'Error: Duplicate Key , product ,66ba1c4ef624a28e26d803ae\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:67:12)',
  level: 'error',
  message: 'Error: Duplicate Key , product ,66ba1c4ef624a28e26d803ae',
  timestamp: '2024-08-12T14:56:52.141Z'
}
{
  stack: 'Error: Duplicate Key , product ,66ba1c4ef624a28e26d803ae\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:67:12)',
  level: 'error',
  message: 'Error: Duplicate Key , product ,66ba1c4ef624a28e26d803ae',
  timestamp: '2024-08-12T14:58:01.777Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Product Found',
  timestamp: '2024-08-12T15:06:39.282Z'
}
{
  message: 'Invalid User Id for creating cartItems',
  level: 'error',
  timestamp: '2024-08-12T15:06:54.983Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid User Id',
  timestamp: '2024-08-12T15:06:54.984Z'
}
{
  message: 'Invalid User Id for creating cartItems',
  level: 'error',
  timestamp: '2024-08-12T15:06:54.991Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid User Id',
  timestamp: '2024-08-12T15:06:54.992Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-12T15:08:41.126Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-12T15:08:41.128Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:39.077Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:42.467Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:43.036Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:43.223Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:44.178Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:44.351Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:46.080Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:46.272Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:46.691Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:46.889Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:47.092Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:47.289Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:47.505Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:47.739Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:47.976Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:48.204Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:48.437Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:48.809Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:48.905Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:49.142Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:49.445Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:49.658Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:50.043Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:50.240Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:50.455Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:50.671Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:50.887Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:51.139Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:10:51.372Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:11:15.460Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:11:15.606Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-12T15:11:15.771Z'
}
{
  stack: 'Error: Duplicate Key , slug ,pants\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , slug ,pants',
  timestamp: '2024-08-12T15:14:50.126Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ba262028dac15a78177430",
  level: 'error',
  timestamp: '2024-08-12T15:15:49.350Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-12T15:15:49.352Z'
}
{
  stack: 'Error: Duplicate Key , slug ,male_jeans\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , slug ,male_jeans',
  timestamp: '2024-08-12T15:16:09.288Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Invalid regular expression: /(?=.*[)/: Unterminated character class'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-12T15:42:34.595Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,66ba26f779c6bd6aa93a7e31\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,66ba26f779c6bd6aa93a7e31',
  timestamp: '2024-08-12T15:43:24.374Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:11:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db ',
  timestamp: '2024-08-13T14:17:19.134Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:11:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db ',
  timestamp: '2024-08-13T14:17:39.923Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:11:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db ',
  timestamp: '2024-08-13T14:17:54.091Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,,Key size.value is Already exist in the Db, \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:12:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,,Key size.value is Already exist in the Db, ',
  timestamp: '2024-08-13T14:22:20.273Z'
}
{
  stack: 'Error: Key name is Already exist in the Db, KHALED,Key size.value is Already exist in the Db, KHALED \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:12:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db, KHALED,Key size.value is Already exist in the Db, KHALED ',
  timestamp: '2024-08-13T14:22:49.830Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,,Key size.value is Already exist in the Db, \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:12:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,,Key size.value is Already exist in the Db, ',
  timestamp: '2024-08-13T14:23:49.749Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:13:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:68:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db ',
  timestamp: '2024-08-13T14:24:21.888Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:14:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db ',
  timestamp: '2024-08-13T14:25:10.754Z'
}
{
  stack: 'Error: Key name is Already exist in the Db \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:14:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db ',
  timestamp: '2024-08-13T14:25:45.138Z'
}
{
  stack: 'Error: Key name is Already exist in the Db \n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:14:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db ',
  timestamp: '2024-08-13T14:25:48.027Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,,Key size.value is Already exist in the Db,\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:14:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,,Key size.value is Already exist in the Db,',
  timestamp: '2024-08-13T14:27:10.516Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:14:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:27:31.395Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:14:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:29:05.588Z'
}
{
  stack: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:14:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key name is Already exist in the Db,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:29:10.247Z'
}
{
  stack: 'Error: ,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:15:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: ,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:30:35.701Z'
}
{
  stack: 'Error: ,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:15:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: ,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:31:26.384Z'
}
{
  stack: 'Error: ,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:15:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: ,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:31:28.398Z'
}
{
  stack: 'Error: ,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:15:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: ,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:31:42.524Z'
}
{
  stack: 'Error: ,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:15:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: ,Key size.value is Already exist in the Db',
  timestamp: '2024-08-13T14:32:10.208Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Category with this ID',
  timestamp: '2024-08-13T14:52:12.219Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Category with this ID',
  timestamp: '2024-08-13T14:52:17.240Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T14:52:53.515Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-13T14:55:52.047Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-13T14:55:52.048Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-13T14:58:13.082Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-13T14:58:13.084Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-13T14:58:15.990Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T14:58:29.677Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T14:58:29.678Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T14:58:33.867Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T14:58:33.868Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T14:58:34.645Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T14:58:34.646Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T14:58:44.201Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T14:58:44.201Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T14:59:03.034Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T14:59:03.035Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T15:01:15.640Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T15:01:15.641Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T15:01:17.296Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T15:01:17.296Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T15:01:33.432Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T15:01:33.433Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T15:01:45.528Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T15:01:45.528Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T15:01:46.702Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T15:01:46.702Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-13T15:02:39.810Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-13T15:02:39.811Z'
}
{
  userId: new ObjectId('66bb743450f4ed785105e3cc'),
  email: 'khalednasser788@gmail.com',
  name: 'Khaled',
  isActive: false,
  level: 'error',
  message: 'Not Activated User , should Activate his account',
  timestamp: '2024-08-13T15:02:43.990Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Active your account',
  timestamp: '2024-08-13T15:02:43.991Z'
}
{
  message: "Couldn't Create Cart Items for the user 66bb743450f4ed785105e3cc",
  level: 'error',
  timestamp: '2024-08-13T15:03:14.297Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-13T15:03:14.298Z'
}
{
  stack: 'Error: Key email is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:13:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:68:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key email is Already exist in the Db',
  timestamp: '2024-08-13T15:03:32.319Z'
}
{
  stack: 'Error: Key email is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:13:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:68:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key email is Already exist in the Db',
  timestamp: '2024-08-13T15:03:48.887Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading 'subCategory')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T15:11:31.719Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading 'subCategory')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T15:15:10.626Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading 'subCategory')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T15:15:16.003Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading 'subCategory')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T15:16:12.105Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading 'subCategory')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T15:16:50.110Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading 'subCategory')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T15:22:10.366Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading 'subCategory')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-13T15:24:03.045Z'
}
{
  stack: 'Error: discount : Cast to Number failed for value "NaN" (type number) at path "discount",\n' +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:24:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: discount : Cast to Number failed for value "NaN" (type number) at path "discount",',
  timestamp: '2024-08-13T15:24:34.089Z'
}
{
  stack: 'Error: colors.0.quantity : Color quantity is required,\n' +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:24:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: colors.0.quantity : Color quantity is required,',
  timestamp: '2024-08-13T15:33:51.289Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-13T18:50:05.954Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-16T11:24:50.197Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-16T11:24:50.198Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Password must be at least 8 characters',
  timestamp: '2024-08-16T11:24:53.069Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Invalid regular expression: /(?=.*[)/: Unterminated character class'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-16T11:36:48.629Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T11:57:29.852Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T11:58:13.244Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T11:58:22.366Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T11:58:26.127Z'
}
{
  stack: 'Error: Key product.name is Already exist in the Db,Key product.size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:13:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:68:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Key product.name is Already exist in the Db,Key product.size.value is Already exist in the Db',
  timestamp: '2024-08-16T11:59:31.734Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T11:59:31.752Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T11:59:54.989Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T12:00:25.829Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T12:04:41.738Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T12:04:52.219Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T12:05:48.036Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T12:05:54.167Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot access 'productId' before initialization"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-16T12:07:42.536Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T12:08:40.023Z'
}
{
  stack: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, 66bf3e6a8fa16995cb6541b5 is not a valid ID',
  timestamp: '2024-08-16T12:10:52.624Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?479033',
  level: 'error',
  timestamp: '2024-08-24T17:42:41.502Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?479033 URL',
  timestamp: '2024-08-24T17:42:41.504Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-24T17:42:41.636Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-24T17:42:41.637Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-24T17:42:49.095Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-24T17:42:49.096Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?479033',
  level: 'error',
  timestamp: '2024-08-24T17:43:25.927Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?479033 URL',
  timestamp: '2024-08-24T17:43:25.928Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-24T23:06:14.533Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-24T23:06:14.534Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:29.552Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:30.448Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:31.339Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:32.204Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:33.036Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:33.950Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:34.901Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:35.808Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:36.670Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:37.608Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:38.610Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:39.566Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:40.466Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:41.365Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:42.229Z'
}
{
  level: 'error',
  message: 'Error',
  timestamp: '2024-08-24T23:34:43.088Z'
}
{
  message: 'Accessing Not Found Route , /api/some-endpoint',
  level: 'error',
  timestamp: '2024-08-26T00:18:47.809Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /api/some-endpoint URL',
  timestamp: '2024-08-26T00:18:47.811Z'
}
{
  message: 'Accessing Not Found Route , /api/some-endpoint',
  level: 'error',
  timestamp: '2024-08-26T00:28:37.078Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /api/some-endpoint URL',
  timestamp: '2024-08-26T00:28:37.079Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T03:58:26.516Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T03:58:26.517Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T04:08:11.452Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T04:08:11.452Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T04:10:35.354Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T04:10:35.354Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T04:10:56.529Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T04:10:56.530Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T04:10:57.129Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T04:10:57.130Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T04:21:36.450Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T04:21:36.451Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-26T05:15:47.772Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-26T05:15:47.772Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T07:08:17.034Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T07:08:17.035Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T07:08:17.250Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T07:08:17.251Z'
}
{
  email: 'admin@orca-wear.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-26T07:27:20.333Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-26T07:27:20.334Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'User.find(...).count is not a function'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-26T07:27:35.709Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'User.find(...).count is not a function'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-26T07:27:42.954Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'User.find(...).count is not a function'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-26T07:27:52.586Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-08-26T07:28:12.658Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: You are not logging in , Please Login ',
  timestamp: '2024-08-26T07:28:12.658Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'User.find(...).count is not a function'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-26T07:29:17.385Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-08-26T10:45:31.881Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: You are not logging in , Please Login ',
  timestamp: '2024-08-26T10:45:31.881Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T10:45:33.069Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T10:45:33.069Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-08-26T10:48:52.416Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: You are not logging in , Please Login ',
  timestamp: '2024-08-26T10:48:52.417Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-08-26T10:49:44.286Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: You are not logging in , Please Login ',
  timestamp: '2024-08-26T10:49:44.287Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'User.find(...).count is not a function'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-26T11:03:24.605Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-26T11:18:48.157Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-26T11:18:48.158Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-26T11:18:54.013Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-26T11:18:54.013Z'
}
{
  message: 'Accessing Not Found Route , /Public/home/js/check.js',
  level: 'error',
  timestamp: '2024-08-26T16:23:37.388Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /Public/home/js/check.js URL',
  timestamp: '2024-08-26T16:23:37.390Z'
}
{
  message: 'Accessing Not Found Route , /static/admin/javascript/hetong.js',
  level: 'error',
  timestamp: '2024-08-26T16:23:38.805Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /static/admin/javascript/hetong.js URL',
  timestamp: '2024-08-26T16:23:38.806Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-26T16:58:25.730Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-26T16:58:25.731Z'
}
{
  message: 'Payment with the id of pi_test_9bcbc83270e1451d9c335bd8dda7583a not found ',
  level: 'error',
  timestamp: '2024-08-26T17:01:46.370Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Payment with this Intention',
  timestamp: '2024-08-26T17:01:46.372Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-26T17:08:21.170Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-26T17:08:21.171Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T17:09:33.176Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ccb6b56a5ea444f4b04cbf",
  level: 'error',
  timestamp: '2024-08-26T17:14:51.551Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-26T17:14:51.551Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T17:15:59.009Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T17:16:05.969Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T17:16:21.695Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T17:16:31.727Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ccb6b56a5ea444f4b04cbf",
  level: 'error',
  timestamp: '2024-08-26T17:59:05.952Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-26T17:59:05.953Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ccb6b56a5ea444f4b04cbf",
  level: 'error',
  timestamp: '2024-08-26T17:59:21.476Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-26T17:59:21.477Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ca1fde04957389b91719ed",
  level: 'error',
  timestamp: '2024-08-26T17:59:35.181Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-26T17:59:35.182Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T18:11:09.142Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T19:43:17.873Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T19:43:42.997Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T19:53:06.092Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T19:53:33.954Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T19:54:13.991Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-26T19:54:53.037Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-26T23:32:38.751Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-26T23:32:38.752Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ca1fde04957389b91719ed",
  level: 'error',
  timestamp: '2024-08-27T07:42:03.586Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-27T07:42:03.587Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-27T07:42:16.547Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-08-27T08:35:27.183Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-08-27T08:35:27.183Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-27T09:24:03.547Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-27T09:24:03.547Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-27T18:54:29.070Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-27T18:54:29.071Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-28T01:28:22.867Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-28T01:28:22.868Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-28T12:00:08.058Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-28T12:00:08.069Z'
}
{
  message: 'Payment with the id of pi_test_3770ea8abfbe4574bca53774bd93a47d not found ',
  level: 'error',
  timestamp: '2024-08-28T13:11:26.297Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Payment with this Intention',
  timestamp: '2024-08-28T13:11:26.298Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?479125',
  level: 'error',
  timestamp: '2024-08-28T13:11:34.224Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?479125 URL',
  timestamp: '2024-08-28T13:11:34.225Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-28T13:27:49.286Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?479125',
  level: 'error',
  timestamp: '2024-08-28T13:28:48.912Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?479125 URL',
  timestamp: '2024-08-28T13:28:48.913Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-28T13:45:26.736Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?479125',
  level: 'error',
  timestamp: '2024-08-28T13:46:35.106Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?479125 URL',
  timestamp: '2024-08-28T13:46:35.107Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-28T13:46:47.837Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-28T13:47:11.941Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-28T13:48:02.927Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-28T13:50:07.307Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:67:43)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-28T13:52:20.433Z'
}
{
  message: "Couldn't Create Cart Items for the user 66cf3ef147e6e95d84bcde6d",
  level: 'error',
  timestamp: '2024-08-28T16:26:42.186Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-28T16:26:42.187Z'
}
{
  message: 'Payment with the id of pi_test_ff0b8fb1cafa44baa5e628115531a709 not found ',
  level: 'error',
  timestamp: '2024-08-28T16:42:24.236Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Payment with this Intention',
  timestamp: '2024-08-28T16:42:24.237Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?479128',
  level: 'error',
  timestamp: '2024-08-28T16:42:32.029Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?479128 URL',
  timestamp: '2024-08-28T16:42:32.030Z'
}
{
  stack: 'Error: name : name must be at least 3 character,\n' +
    '    at validationError (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:24:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:69:49)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: name : name must be at least 3 character,',
  timestamp: '2024-08-28T18:43:33.723Z'
}
{
  stack: 'Error: name : name must be at least 3 character,\n' +
    '    at validationError (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:24:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:69:49)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: name : name must be at least 3 character,',
  timestamp: '2024-08-28T18:43:59.091Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-28T19:05:03.917Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-28T19:05:07.899Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Name must only contain letters',
  timestamp: '2024-08-28T19:05:10.966Z'
}
{
  email: 'aliahmedfathi37@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-28T19:07:00.270Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-28T19:07:00.270Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-29T02:33:30.874Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-29T02:33:30.875Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-29T02:33:37.314Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-29T02:33:37.314Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-29T14:14:04.608Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-29T14:14:04.609Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-29T21:14:05.858Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-29T21:14:05.859Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-29T21:14:05.866Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-29T21:14:05.867Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-29T21:14:05.929Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-29T21:14:05.930Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-30T01:00:05.103Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-30T01:00:05.104Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-30T05:41:29.534Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-30T05:41:29.535Z'
}
{
  message: 'Accessing Not Found Route , //api.orca-wear.c',
  level: 'error',
  timestamp: '2024-08-30T08:41:45.043Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your //api.orca-wear.c URL',
  timestamp: '2024-08-30T08:41:45.043Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-08-30T21:01:11.322Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-08-30T21:01:11.323Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-31T16:04:49.011Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-08-31T16:04:49.012Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of undefined (reading 'split')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-31T16:05:15.878Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of undefined (reading 'split')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-31T16:07:19.567Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of undefined (reading 'split')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-31T16:15:29.633Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of undefined (reading 'split')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-31T16:17:25.105Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of undefined (reading 'split')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-31T16:18:32.672Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of undefined (reading 'split')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-31T16:20:13.616Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-01T03:38:29.265Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-01T03:38:29.266Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-02T02:45:22.600Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-02T02:45:22.601Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-03T04:07:11.018Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-03T04:07:11.019Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-04T21:03:10.845Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-04T21:03:10.848Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-05T15:55:52.233Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-05T15:55:52.235Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-09-05T20:36:48.851Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-09-05T20:36:48.851Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-06T05:39:34.357Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-06T05:39:34.358Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-07T09:12:17.698Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-07T09:12:17.701Z'
}
{
  message: "Couldn't Create Cart Items for the user 66cf3ef147e6e95d84bcde6d",
  level: 'error',
  timestamp: '2024-09-07T11:55:55.764Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-09-07T11:55:55.765Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-08T11:45:47.863Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-08T11:45:47.866Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-09-08T19:40:55.867Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-09-08T19:40:55.871Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-09-09T00:20:57.042Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-09-09T00:20:57.043Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-09T12:16:17.397Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-09T12:16:17.401Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-10T04:56:52.968Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-10T04:56:52.972Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-09-10T09:36:54.086Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-09-10T09:36:54.087Z'
}
{
  message: 'Accessing Not Found Route , /.env',
  level: 'error',
  timestamp: '2024-09-10T18:40:42.779Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.env URL',
  timestamp: '2024-09-10T18:40:42.781Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-09-11T00:26:04.623Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-09-11T00:26:04.629Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-12T14:47:44.832Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-12T14:47:44.849Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-09-13T02:09:13.833Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-09-13T02:09:13.833Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-14T02:05:46.352Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-14T02:05:46.354Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-14T21:16:08.442Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-14T21:16:08.446Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-15T09:40:59.762Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-15T09:40:59.771Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-16T04:41:44.923Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-16T04:41:44.926Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-09-16T15:08:03.144Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-09-16T15:08:03.148Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-09-16T15:08:16.464Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-09-16T15:08:16.465Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-17T15:36:26.982Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-17T15:36:26.985Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-18T14:18:41.328Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-18T14:18:41.352Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-19T05:21:15.921Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-19T05:21:15.927Z'
}
{
  message: 'Accessing Not Found Route , /app/',
  level: 'error',
  timestamp: '2024-09-19T08:27:37.547Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /app/ URL',
  timestamp: '2024-09-19T08:27:37.547Z'
}
{
  message: 'Accessing Not Found Route , /login/',
  level: 'error',
  timestamp: '2024-09-19T08:27:37.664Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /login/ URL',
  timestamp: '2024-09-19T08:27:37.665Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-19T12:36:35.418Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-19T12:36:35.418Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-09-19T15:12:31.938Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-09-19T15:12:31.939Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-20T04:12:33.872Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-20T04:12:33.876Z'
}
{
  email: undefined,
  level: 'error',
  message: 'No User with this email',
  timestamp: '2024-09-20T08:45:05.231Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No User with This Email',
  timestamp: '2024-09-20T08:45:05.232Z'
}
{
  email: undefined,
  level: 'error',
  message: 'No User with this email',
  timestamp: '2024-09-20T08:45:08.319Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No User with This Email',
  timestamp: '2024-09-20T08:45:08.319Z'
}
{
  email: undefined,
  level: 'error',
  message: 'No User with this email',
  timestamp: '2024-09-20T08:45:58.332Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No User with This Email',
  timestamp: '2024-09-20T08:45:58.332Z'
}
{
  email: undefined,
  level: 'error',
  message: 'No User with this email',
  timestamp: '2024-09-20T08:46:04.682Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No User with This Email',
  timestamp: '2024-09-20T08:46:04.682Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-09-21T02:22:48.702Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-09-21T02:22:48.704Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-09-21T20:16:51.805Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-09-21T20:16:51.807Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-23T04:55:07.032Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-23T04:55:07.040Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-09-24T09:41:35.471Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-09-24T09:41:35.477Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-25T04:49:06.287Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-25T04:49:06.295Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-25T19:40:36.507Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-25T19:40:36.509Z'
}
{
  message: 'Accessing Not Found Route , /api/v1/',
  level: 'error',
  timestamp: '2024-09-27T17:08:08.800Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /api/v1/ URL',
  timestamp: '2024-09-27T17:08:08.802Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-09-28T03:37:18.976Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-09-28T03:37:18.995Z'
}
{
  message: 'Accessing Not Found Route , /.git/config',
  level: 'error',
  timestamp: '2024-09-29T19:26:57.610Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /.git/config URL',
  timestamp: '2024-09-29T19:26:57.619Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ca1fde04957389b91719ed",
  level: 'error',
  timestamp: '2024-10-01T10:40:54.380Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-10-01T10:40:54.381Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-10-01T16:18:23.545Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-10-01T16:18:23.552Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-10-03T04:19:40.613Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-10-03T04:19:40.614Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-10-03T13:15:01.686Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-10-03T13:15:01.690Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ca1fde04957389b91719ed",
  level: 'error',
  timestamp: '2024-10-04T11:42:48.960Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-10-04T11:42:48.963Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?480012',
  level: 'error',
  timestamp: '2024-10-04T12:45:27.364Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?480012 URL',
  timestamp: '2024-10-04T12:45:27.365Z'
}
{
  message: "Couldn't Create Cart Items for the user 66ca1fde04957389b91719ed",
  level: 'error',
  timestamp: '2024-10-04T15:07:51.520Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-10-04T15:07:51.521Z'
}
{
  stack: 'Error: ,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:13:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:68:37)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: ,Key size.value is Already exist in the Db',
  timestamp: '2024-10-04T17:46:30.611Z'
}
{
  stack: 'Error: ,Key size.value is Already exist in the Db\n' +
    '    at duplicateKeyHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:13:10)\n' +
    '    at globalErrorHandler (file:///root/Orca-E-commerce/src/middlewares/globalerrorHandler.js:68:37)\n' +
    '    at Layer.handle_error (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/root/Orca-E-commerce/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: ,Key size.value is Already exist in the Db',
  timestamp: '2024-10-04T18:08:42.353Z'
}
{
  message: 'Payment with the id of pi_test_116725a50a4e4993b8bfbf6a9326198d not found ',
  level: 'error',
  timestamp: '2024-10-06T20:40:46.759Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Payment with this Intention',
  timestamp: '2024-10-06T20:40:46.762Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?480068',
  level: 'error',
  timestamp: '2024-10-06T20:40:54.586Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?480068 URL',
  timestamp: '2024-10-06T20:40:54.587Z'
}
{
  message: 'Payment with the id of pi_test_a35425c2457045cfa841dbaf6e643d68 not found ',
  level: 'error',
  timestamp: '2024-10-06T20:42:16.612Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Payment with this Intention',
  timestamp: '2024-10-06T20:42:16.612Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?480068',
  level: 'error',
  timestamp: '2024-10-06T20:42:24.240Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?480068 URL',
  timestamp: '2024-10-06T20:42:24.241Z'
}
{
  message: 'Payment with the id of pi_test_d0089db582904cfd887b1be0ac8f8523 not found ',
  level: 'error',
  timestamp: '2024-10-06T20:46:50.199Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Payment with this Intention',
  timestamp: '2024-10-06T20:46:50.199Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?480068',
  level: 'error',
  timestamp: '2024-10-06T20:46:57.742Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?480068 URL',
  timestamp: '2024-10-06T20:46:57.743Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?480068',
  level: 'error',
  timestamp: '2024-10-06T20:47:12.937Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?480068 URL',
  timestamp: '2024-10-06T20:47:12.938Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-10-07T13:52:07.629Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-10-07T13:52:07.632Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-10-08T08:26:53.708Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /favicon.ico URL',
  timestamp: '2024-10-08T08:26:53.793Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-10-09T14:48:11.423Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-10-09T14:48:11.432Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-10-09T17:47:24.421Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-10-09T17:47:24.427Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt',
  level: 'error',
  timestamp: '2024-10-09T17:47:24.899Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt URL',
  timestamp: '2024-10-09T17:47:24.900Z'
}
{
  message: 'Payment with the id of pi_test_3403cfa4fe4040ff94fdeef9d248b4a2 not found ',
  level: 'error',
  timestamp: '2024-10-09T21:37:39.359Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Payment with this Intention',
  timestamp: '2024-10-09T21:37:39.362Z'
}
{
  message: 'Accessing Not Found Route , /robots.txt?480141',
  level: 'error',
  timestamp: '2024-10-09T21:37:47.179Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Not Found Page , No route with your /robots.txt?480141 URL',
  timestamp: '2024-10-09T21:37:47.181Z'
}
