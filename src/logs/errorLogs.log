{
  message: 'Accessing Not Found Route , /login',
  level: 'error',
  timestamp: '2024-07-24T13:59:19.070Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-24T13:59:51.142Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-07-25T16:27:01.887Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-07-25T16:27:05.256Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:01:52.836Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:02:14.669Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:06:19.708Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:15:30.776Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:16:09.575Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:16:20.594Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:16:45.631Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-25T23:19:12.904Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-26T00:50:23.400Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-26T01:32:16.531Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-26T01:34:27.595Z'
}
{
  email: 'mustafa.ramadan165@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-26T14:50:25.979Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-26T17:17:01.008Z'
}
{
  message: "Couldn't Create Cart Items for the user 669c2bc60b1a3087bc29784b",
  level: 'error',
  timestamp: '2024-07-27T00:20:23.688Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-07-27T13:37:24.672Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No SubCategory with this ID',
  timestamp: '2024-08-01T17:37:38.282Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No SubCategory with this ID',
  timestamp: '2024-08-01T17:38:02.466Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-01T17:45:29.704Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-01T17:45:29.707Z'
}
{
  stack: 'Error: Duplicate Key , slug ,test_2\n' +
    '    at duplicateKeyHandler (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\layer.js:71:5)\n' +
    '    at trim_prefix (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:326:13)\n' +
    '    at H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:646:15\n' +
    '    at next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:265:14)\n' +
    '    at next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , slug ,test_2',
  timestamp: '2024-08-01T17:48:54.933Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-02T15:19:37.254Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-02T15:19:37.258Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T15:20:20.921Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T15:20:20.923Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T15:20:20.926Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T15:20:20.928Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: "Cannot read properties of null (reading '_id')"
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-02T15:57:54.353Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-02T16:00:00.704Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-02T16:00:00.706Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T16:49:08.771Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T16:49:08.773Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T17:51:20.714Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T17:51:20.717Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T18:42:41.639Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T18:42:41.642Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-02T18:43:47.296Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-02T18:43:47.298Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-02T22:36:58.539Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-02T22:36:58.542Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-02T22:38:08.482Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-02T22:38:08.484Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-03T12:57:17.725Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-03T12:57:17.729Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:22:04.109Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:22:04.112Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:31:07.809Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:31:07.812Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-03T13:32:03.453Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-03T13:32:03.455Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:33:09.533Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:33:09.536Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:34:36.012Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:34:36.014Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-03T13:36:15.436Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-03T13:36:15.438Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-03T13:37:39.787Z'
}
{
  stack: undefined,
  level: 'error',
  message: "Error: Couldn't Create Cart Items",
  timestamp: '2024-08-03T13:37:39.790Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///H:/Backend%20Backup/Orca-E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\layer.js:71:5)\n' +
    '    at trim_prefix (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:326:13)\n' +
    '    at H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:286:9\n' +
    '    at Function.process_params (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:346:12)\n' +
    '    at Immediate.next (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:280:10)\n' +
    '    at Immediate._onImmediate (H:\\Backend Backup\\Orca-E-commerce\\node_modules\\express\\lib\\router\\index.js:646:15)\n' +
    '    at process.processImmediate (node:internal/timers:480:21)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-03T17:35:03.036Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name must be a string"}',
  timestamp: '2024-08-04T17:48:40.175Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name must be a string"}',
  timestamp: '2024-08-04T20:47:51.513Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name must be a string"}',
  timestamp: '2024-08-05T00:15:46.218Z'
}
{
  error: {
    message: '/tmp/c9d71394-3bc3-4ee7-b1b4-dbfc43333ff6.jpg: unable to open for write\n' +
      'windows error: The system cannot find the file specified.',
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T01:34:53.368Z'
}
{
  error: {
    message: '/tmp/82ec9a64-f5f3-44bf-87c5-5f8fcc050093.jpg: unable to open for write\n' +
      'windows error: The system cannot find the file specified.',
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T02:55:57.073Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description must be a string"}',
  timestamp: '2024-08-05T10:24:19.393Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'slug() requires a string argument, received object'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T10:26:33.937Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'slug() requires a string argument, received object'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-05T10:26:56.288Z'
}
{
  message: 'Accessing Not Found Route , /api/v1/product',
  level: 'error',
  timestamp: '2024-08-05T20:11:00.922Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-05T20:11:01.189Z'
}
{
  message: 'Accessing Not Found Route , /api/v1/product',
  level: 'error',
  timestamp: '2024-08-05T20:11:02.734Z'
}
{
  message: 'Accessing Not Found Route , /api/v1/product',
  level: 'error',
  timestamp: '2024-08-05T20:11:02.738Z'
}
{
  token: '',
  level: 'error',
  message: 'No token in the header to make the user login ',
  timestamp: '2024-08-07T10:04:17.449Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-07T11:14:02.281Z'
}
{
  message: "Couldn't Create Cart Items for the user 66a7fe733bbf88338c59348f",
  level: 'error',
  timestamp: '2024-08-07T16:21:08.644Z'
}
{
  email: 'nasserahmed093@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-07T16:24:19.734Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name not allowed to be empty"}',
  timestamp: '2024-08-08T23:14:12.187Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description not allowed to be empty"}',
  timestamp: '2024-08-08T23:35:11.466Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description not allowed to be empty"}',
  timestamp: '2024-08-08T23:35:14.596Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Description not allowed to be empty"}',
  timestamp: '2024-08-08T23:35:45.245Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: {"type":"body","error":"Name not allowed to be empty"}',
  timestamp: '2024-08-08T23:59:54.804Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Invalid regular expression: /(?=.*[)/: Unterminated character class'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T01:29:06.056Z'
}
{
  stack: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n  '6', 'b', '5', 'e',\\n  '7', 'a', 'd', '0',\\n  '3', '1', '4', '2'\\n]" (type string) at path "subCategory.0" because of "CastError",\n` +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n  '6', 'b', '5', 'e',\\n  '7', 'a', 'd', '0',\\n  '3', '1', '4', '2'\\n]" (type string) at path "subCategory.0" because of "CastError",`,
  timestamp: '2024-08-09T12:09:45.229Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,66b56e7b5a66de60331d426e\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,66b56e7b5a66de60331d426e',
  timestamp: '2024-08-09T12:37:56.595Z'
}
{
  error: { statusCode: 500, status: 'error', message: 'query is not defined' },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T13:38:01.379Z'
}
{
  message: 'Invalid User Id for creating cartItems',
  level: 'error',
  timestamp: '2024-08-09T14:41:55.537Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:45:40.682Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:45:44.116Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:45:47.821Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T14:49:36.037Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-09T14:49:36.040Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T15:31:01.583Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T15:34:18.173Z'
}
{
  stack: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",\n` +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",`,
  timestamp: '2024-08-09T15:55:19.618Z'
}
{
  stack: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",\n` +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: `Error: subCategory.0 : Cast to [ObjectId] failed for value "[\\n' +\n` +
    `  "  '6', 'b', '3', 'a',\\n" +\n` +
    `  "  '7', '5', '0', '4',\\n" +\n` +
    `  "  'e', 'f', '1', '8',\\n" +\n` +
    `  "  '9', 'd'\\n" +\n` +
    `  ']" (type string) at path "subCategory.0" because of "CastError",`,
  timestamp: '2024-08-09T16:00:24.271Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:01:39.505Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:44:29.933Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:46:00.036Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:46:08.194Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T16:46:45.694Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T16:49:32.587Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T16:53:00.190Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T17:11:02.543Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T17:14:05.247Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T17:15:48.213Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:19:15.749Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:22:04.095Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:23:11.847Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:24:01.219Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:27:28.324Z'
}
{
  stack: 'Error: Duplicate Key , subCategory ,undefined\n' +
    '    at duplicateKeyHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:9:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:70:37)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: Duplicate Key , subCategory ,undefined',
  timestamp: '2024-08-09T17:29:07.615Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-09T18:41:46.128Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 13033,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
              },
              list: [
                'api.cloudinary.com:443:::::::::::::::::::::',
                'accept.paymob.com:443:::::::::::::::::::::'
              ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 13033,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
          },
          list: [
            'api.cloudinary.com:443:::::::::::::::::::::',
            'accept.paymob.com:443:::::::::::::::::::::'
          ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13033,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 18:44:28 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13033,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 18:44:28 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 13033,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 18:44:28 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13033,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 13033,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
            },
            list: [
              'api.cloudinary.com:443:::::::::::::::::::::',
              'accept.paymob.com:443:::::::::::::::::::::'
            ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13033,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 18:44:28 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13033,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 18:44:28 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 13033,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T18:44:28.345Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 13279,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
              },
              list: [
                'api.cloudinary.com:443:::::::::::::::::::::',
                'accept.paymob.com:443:::::::::::::::::::::'
              ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 13279,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
          },
          list: [
            'api.cloudinary.com:443:::::::::::::::::::::',
            'accept.paymob.com:443:::::::::::::::::::::'
          ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13279,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 18:44:38 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13279,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 18:44:38 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 13279,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 18:44:38 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13279,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 13279,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
            },
            list: [
              'api.cloudinary.com:443:::::::::::::::::::::',
              'accept.paymob.com:443:::::::::::::::::::::'
            ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13279,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 18:44:38 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13279,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 18:44:38 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 13279,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 88 26 f6 13 18 21 03 e8 10 9c e4 4a 54 08 68 f4 99 6d 03 6e 9c 83 98 45 e9 63 33 67 09 e3 7f 6c 04 ... 1803 more bytes>,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T18:44:38.529Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 13574,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
              },
              list: [
                'api.cloudinary.com:443:::::::::::::::::::::',
                'accept.paymob.com:443:::::::::::::::::::::'
              ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 13574,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
          },
          list: [
            'api.cloudinary.com:443:::::::::::::::::::::',
            'accept.paymob.com:443:::::::::::::::::::::'
          ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13574,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 18:45:05 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13574,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 18:45:05 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 13574,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 18:45:05 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 13574,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                },
                list: [
                  'api.cloudinary.com:443:::::::::::::::::::::',
                  'accept.paymob.com:443:::::::::::::::::::::'
                ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 13574,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
            },
            list: [
              'api.cloudinary.com:443:::::::::::::::::::::',
              'accept.paymob.com:443:::::::::::::::::::::'
            ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13574,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 18:45:05 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 13574,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                      },
                      list: [
                        'api.cloudinary.com:443:::::::::::::::::::::',
                        'accept.paymob.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                  },
                  list: [
                    'api.cloudinary.com:443:::::::::::::::::::::',
                    'accept.paymob.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 18:45:05 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 13574,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          session: <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 01 ba 69 2a d9 9f 99 b5 79 62 f7 16 db e6 5c db c1 9e 14 97 5e be dc af a1 b4 fe 2e d1 01 8c c4 04 ... 1803 more bytes>,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.cloudinary.com:443:::::::::::::::::::::': <Buffer 30 82 07 db 02 01 01 02 02 03 03 04 02 c0 2f 04 20 d6 74 98 26 38 3e d3 5b f5 13 8b 6d f9 33 57 c5 e3 2c 1f 47 84 6d 66 45 28 d8 54 2a c6 1b e9 84 04 ... 1965 more bytes>,
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 ab c6 78 81 ce 5b 34 f0 5d ae ed 94 ee 2e 9e ff 60 c1 68 7c 61 9d 50 99 db ae e1 37 de 15 17 50 04 ... 1803 more bytes>
                    },
                    list: [
                      'api.cloudinary.com:443:::::::::::::::::::::',
                      'accept.paymob.com:443:::::::::::::::::::::'
                    ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T18:45:05.324Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-09T19:20:32.001Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-09T19:20:43.409Z'
}
{
  stack: 'Error:  Invalid ID, [object Object] is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID, [object Object] is not a valid ID',
  timestamp: '2024-08-09T19:24:23.987Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Unexpected number in JSON at position 1'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T19:48:01.335Z'
}
{
  error: {
    message: 'Request failed with status code 400',
    name: 'AxiosError',
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
        'User-Agent': 'axios/1.7.2',
        'Content-Length': '719',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'https://accept.paymob.com/v1/intention/',
      data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '719',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'accept.paymob.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'accept.paymob.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 1299,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
              },
              list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'accept.paymob.com',
          noDelay: true,
          servername: 'accept.paymob.com',
          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
        'User-Agent: axios/1.7.2\r\n' +
        'Content-Length: 719\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: accept.paymob.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'accept.paymob.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'accept.paymob.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'accept.paymob.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 1299,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                  'User-Agent': 'axios/1.7.2',
                  'Content-Length': '719',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'accept.paymob.com',
                port: 443,
                agent: undefined,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/v1/intention/',
                _defaultAgent: [Circular *3],
                host: 'accept.paymob.com',
                noDelay: true,
                servername: 'accept.paymob.com',
                _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
          },
          list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/v1/intention/',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 1299,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                },
                list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Fri, 09 Aug 2024 20:19:11 GMT',
          'Content-Type',
          'application/json',
          'Content-Length',
          '80',
          'Connection',
          'close',
          'Server',
          'nginx',
          'Allow',
          'POST, OPTIONS',
          'Vary',
          'Accept-Language, Cookie, Origin',
          'Content-Language',
          'en',
          'X-Frame-Options',
          'ALLOWALL'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 1299,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                },
                list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://accept.paymob.com/v1/intention/',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Fri, 09 Aug 2024 20:19:11 GMT',
          'content-type': 'application/json',
          'content-length': '80',
          connection: 'close',
          server: 'nginx',
          allow: 'POST, OPTIONS',
          vary: 'Accept-Language, Cookie, Origin',
          'content-language': 'en',
          'x-frame-options': 'ALLOWALL'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'accept.paymob.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/v1/intention/',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
            'User-Agent': 'axios/1.7.2',
            'Content-Length': '719',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'accept.paymob.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'accept.paymob.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'accept.paymob.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 1299,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                          'User-Agent': 'axios/1.7.2',
                          'Content-Length': '719',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'accept.paymob.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/v1/intention/',
                        _defaultAgent: [Circular *3],
                        host: 'accept.paymob.com',
                        noDelay: true,
                        servername: 'accept.paymob.com',
                        _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/intention/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 719,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://accept.paymob.com/v1/intention/',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [
          'Authorization',
          'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
        ],
        'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
        'content-length': [ 'Content-Length', '719' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'accept.paymob.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 400,
      statusText: 'Bad Request',
      headers: Object [AxiosHeaders] {
        date: 'Fri, 09 Aug 2024 20:19:11 GMT',
        'content-type': 'application/json',
        'content-length': '80',
        connection: 'close',
        server: 'nginx',
        allow: 'POST, OPTIONS',
        vary: 'Accept-Language, Cookie, Origin',
        'content-language': 'en',
        'x-frame-options': 'ALLOWALL'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http', 'fetch' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
          'User-Agent': 'axios/1.7.2',
          'Content-Length': '719',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://accept.paymob.com/v1/intention/',
        data: '{"amount":600000,"currency":"EGP","payment_methods":[4606347,4607086],"items":[{"name":{"en":"Sweat Jeans","ar":"سويت جينز"},"description":{"en":"Product Description","ar":"سويت جينز جدا"},"amount":120000,"quantity":5}],"billing_data":{"apartment":"٣","first_name":"Khaled","last_name":"Nasser","street":"السويس, ميدان الاربعين, شارع مصطفي الوكيل اما مطعم دينا بجوار المسجد الاقصي","building":"٣٦","phone_number":"01208741247","city":"Suez","country":"Egypt","email":"khalednasser788@gmail.com","floor":"٣","state":"NA"},"customer":{"first_name":"Khaled","last_name":"Nasser","email":"khalednasser788@gmail.com","extras":{"re":"22"}}}'
      },
      request: <ref *2> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '719',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'accept.paymob.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'accept.paymob.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 1299,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: 443,
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                },
                list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'accept.paymob.com',
            noDelay: true,
            servername: 'accept.paymob.com',
            _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /v1/intention/ HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c\r\n' +
          'User-Agent: axios/1.7.2\r\n' +
          'Content-Length: 719\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: accept.paymob.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'accept.paymob.com:443:::::::::::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'accept.paymob.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'accept.paymob.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *2],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 1299,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                    'User-Agent': 'axios/1.7.2',
                    'Content-Length': '719',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'accept.paymob.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: <ref *4> {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/v1/intention/',
                  _defaultAgent: [Circular *3],
                  host: 'accept.paymob.com',
                  noDelay: true,
                  servername: 'accept.paymob.com',
                  _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
            },
            list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/v1/intention/',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 1299,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                      },
                      list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 09 Aug 2024 20:19:11 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '80',
            'Connection',
            'close',
            'Server',
            'nginx',
            'Allow',
            'POST, OPTIONS',
            'Vary',
            'Accept-Language, Cookie, Origin',
            'Content-Language',
            'en',
            'X-Frame-Options',
            'ALLOWALL'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'accept.paymob.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'accept.paymob.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 1299,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                'User-Agent': 'axios/1.7.2',
                'Content-Length': '719',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'accept.paymob.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                      },
                      list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/intention/',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'accept.paymob.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                  },
                  list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'accept.paymob.com',
              noDelay: true,
              servername: 'accept.paymob.com',
              _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *2],
          responseUrl: 'https://accept.paymob.com/v1/intention/',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 09 Aug 2024 20:19:11 GMT',
            'content-type': 'application/json',
            'content-length': '80',
            connection: 'close',
            server: 'nginx',
            allow: 'POST, OPTIONS',
            vary: 'Accept-Language, Cookie, Origin',
            'content-language': 'en',
            'x-frame-options': 'ALLOWALL'
          },
          [Symbol(kHeadersCount)]: 18,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'accept.paymob.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/v1/intention/',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
              'User-Agent': 'axios/1.7.2',
              'Content-Length': '719',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'accept.paymob.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'accept.paymob.com:443:::::::::::::::::::::': [
                      <ref *1> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'accept.paymob.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: destroy]
                          }
                        },
                        _eventsCount: 10,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'accept.paymob.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 1,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *2],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 1299,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *1]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            Authorization: 'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c',
                            'User-Agent': 'axios/1.7.2',
                            'Content-Length': '719',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'accept.paymob.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/v1/intention/',
                          _defaultAgent: [Circular *3],
                          host: 'accept.paymob.com',
                          noDelay: true,
                          servername: 'accept.paymob.com',
                          _agentKey: 'accept.paymob.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'accept.paymob.com:443:::::::::::::::::::::': <Buffer 30 82 07 39 02 01 01 02 02 03 03 04 02 c0 2f 04 20 19 66 b3 fb 5d e3 56 25 c3 89 ba 5c 45 7b 83 9b fe 06 b6 d5 f2 c3 ad ce 6c 19 d5 87 85 07 8d 64 04 ... 1803 more bytes>
                    },
                    list: [ 'accept.paymob.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/v1/intention/'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 719,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *2],
          _currentUrl: 'https://accept.paymob.com/v1/intention/',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          authorization: [
            'Authorization',
            'Token egy_sk_test_0b96476ff18a0ff3e49c59b9023e7b4f2cf25408f5f976dc9d20d3fb2c3a1b4c'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.7.2' ],
          'content-length': [ 'Content-Length', '719' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'accept.paymob.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      data: {
        items: {
          name: [ 'Not a valid string.' ],
          description: [ 'Not a valid string.' ]
        }
      }
    },
    statusCode: 500,
    status: 'error'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T20:19:11.851Z'
}
{
  message: "Couldn't Create Cart Items for the user 66b62cdf04e5fee1a087e8b5",
  level: 'error',
  timestamp: '2024-08-09T20:43:46.108Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T20:49:22.846Z'
}
{
  email: 'khalednasser788@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T20:50:08.379Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Invalid email or password',
  timestamp: '2024-08-09T20:50:08.383Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: Please Provide Required Fields',
  timestamp: '2024-08-09T20:59:24.486Z'
}
{
  stack: 'Error: size.color : size Color is required,size.label : Size label is required,size.value : Size value is required,name.ar : name is Required,name.en : name is Required,\n' +
    '    at validationError (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:25:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:71:49)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error: size.color : size Color is required,size.label : Size label is required,size.value : Size value is required,name.ar : name is Required,name.en : name is Required,',
  timestamp: '2024-08-09T21:11:26.080Z'
}
{
  error: {
    statusCode: 500,
    status: 'error',
    message: 'Unexpected token u in JSON at position 0'
  },
  stack: undefined,
  level: 'error',
  message: 'Something went wrong',
  timestamp: '2024-08-09T21:13:48.265Z'
}
{
  email: 'admin@gmail.com',
  level: 'error',
  message: 'Invalid Email or Password for user in login',
  timestamp: '2024-08-09T23:14:24.970Z'
}
{
  userId: new ObjectId('66b7960bef26c5dc0da3439a'),
  level: 'error',
  message: "This user didn't activate his account",
  timestamp: '2024-08-10T17:07:23.934Z'
}
{
  message: 'Accessing Not Found Route , /favicon.ico',
  level: 'error',
  timestamp: '2024-08-10T20:35:16.055Z'
}
{
  message: 'Delete cartItems cuz the needed quantity more than the available ',
  level: 'error',
  timestamp: '2024-08-10T20:51:35.869Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:11:46.199Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:18:26.494Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:27:18.886Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:29:47.286Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:30:05.242Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:30:13.231Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:30:19.834Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:30:42.326Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:31:34.769Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:31:48.358Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:32:19.933Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:38:09.114Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T21:40:38.071Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Product Found',
  timestamp: '2024-08-10T21:54:30.881Z'
}
{
  orderId: '66b7e17c7365de27f369e995',
  level: 'error',
  message: 'No Order with this ID',
  timestamp: '2024-08-10T22:26:34.147Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Order with this ID',
  timestamp: '2024-08-10T22:26:34.156Z'
}
{
  orderId: '66b7e17c7365de27f369e995',
  level: 'error',
  message: 'No Order with this ID',
  timestamp: '2024-08-10T22:26:39.016Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Order with this ID',
  timestamp: '2024-08-10T22:26:39.017Z'
}
{
  orderId: '66b7e9ba52ed9b911612c405',
  level: 'error',
  message: 'No Order with this ID',
  timestamp: '2024-08-10T22:45:39.748Z'
}
{
  stack: undefined,
  level: 'error',
  message: 'Error: No Order with this ID',
  timestamp: '2024-08-10T22:45:39.759Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T22:55:18.677Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T23:01:04.005Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T23:01:57.717Z'
}
{
  stack: 'Error:  Invalid ID,  is not a valid ID\n' +
    '    at castId (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:5:10)\n' +
    '    at globalErrorHandler (file:///Users/khalednasser/Documents/My-Work/E-commerce/src/middlewares/globalerrorHandler.js:69:43)\n' +
    '    at Layer.handle_error (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/layer.js:71:5)\n' +
    '    at trim_prefix (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:326:13)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:286:9\n' +
    '    at Function.process_params (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at /Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:646:15\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/index.js:265:14)\n' +
    '    at next (/Users/khalednasser/Documents/My-Work/E-commerce/node_modules/express/lib/router/route.js:141:14)',
  level: 'error',
  message: 'Error:  Invalid ID,  is not a valid ID',
  timestamp: '2024-08-10T23:02:43.431Z'
}
